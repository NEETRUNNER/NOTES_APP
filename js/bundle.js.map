{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAC+I;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,+DAAgB;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9EA;AACwD;AACxD;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzCA;AACwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAO;AACnB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;AC7GA;AACwD;AACuF;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,YAAY,iDAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,+DAAgB;AAC5B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;UC1CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNgE;AAClB;AACc;AAC2F;AAC5G;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAAuB,G","sources":["webpack:///./src/js/modules/addNote.js","webpack:///./src/js/modules/checked.js","webpack:///./src/js/modules/delete.js","webpack:///./src/js/modules/localStorage.js","webpack:///./src/js/modules/other.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/js/script.js"],"sourcesContent":["// Импорт функций\r\nimport {localStorageSave, takeDataFromLocalStorage, loadNotes, loadChecked, checkCardsForTitle, saveLocalStorageChecked} from './localStorage';\r\n\r\n// Переменные для использования\r\nconst btnAdd = document.querySelector('[data-btn=\"add\"]');\r\nconst input = document.querySelector('[data-input]');\r\n\r\n// Функция динамически создает новую заметку\r\nfunction newNote (value) {\r\n    class Note {\r\n        constructor (title) {\r\n            this.title = title;\r\n        }\r\n\r\n        render () {\r\n            const wrapperCard = document.querySelector('.notes-cards__block');\r\n\r\n            const element = document.createElement('div');\r\n            element.className = 'notes-card';\r\n            element.setAttribute('data-card', '');\r\n            wrapperCard.appendChild(element);\r\n\r\n            element.innerHTML = `\r\n            <div class=\"notes-card__title\">${this.title}</div>\r\n            <div class=\"notes-card__block\">\r\n                <img data-delete src=\"img/delete.png\" alt=\"\" class=\"notes-card__img\">\r\n                <img data-checked src=\"img/checked.png\" alt=\"\" class=\"notes-card__img\">\r\n            </div>\r\n        </div>`\r\n        }\r\n    }\r\n    new Note(value).render(value);\r\n    \r\n}\r\n\r\n// Функция проверяет если в инпут ничего нет, то она ничего не делает, если есть то переиспользует функцию newNote которая динамически добавляет елемент\r\nfunction addNote () {\r\n    btnAdd.addEventListener('click', () => {\r\n        const value = input.value;\r\n\r\n        if (value.length === 0) {\r\n            console.log('Ничего');\r\n        } else {\r\n            console.log(value);\r\n            newNote(value);\r\n            input.value = '';\r\n\r\n            // Для каждой новой заметки добавляем имя notes и значение заметки в notesData\r\n            const notesData = Array.from(document.getElementsByClassName('notes-card')).map(noteCard => {\r\n                return {\r\n                    // Для каждого элемента noteCard, он создает новый объект с одним свойством title\r\n                    title: noteCard.querySelector('.notes-card__title').textContent\r\n                    // noteCard.querySelector('.notes-card__title').textContent получает текстовое содержимое элемента с классом notes-card__title внутри текущего noteCard.\r\n                };\r\n            });\r\n            // Сохраняем эти данные в localStorage\r\n            localStorageSave('notes', notesData);\r\n        }\r\n\r\n        \r\n    });\r\n}\r\naddNote();\r\n\r\n// Функция меняет стили при конкретном условии\r\nfunction styleToggle(noteCard, noteTitle) {\r\n    const noteCardIsToggle = noteCard.style.opacity === '0.5';\r\n    \r\n    if (noteCardIsToggle) {\r\n        noteCard.style.opacity = '1';\r\n        noteTitle.style.textDecoration = 'none';\r\n        noteCard.style.transition = '0.5s all';\r\n    } else {\r\n        noteCard.style.opacity = '0.5';\r\n        noteTitle.style.textDecoration = 'line-through';\r\n        noteCard.style.transition = '0.5s all';\r\n    }\r\n}\r\n\r\nexport {newNote, addNote, styleToggle};","// Импорт функций\r\nimport {newNote, addNote, styleToggle} from './addNote';\r\n\r\n\r\n// Функция отвечает за отметку сделанной заметки\r\nfunction checkedNote() {\r\n    document.addEventListener('click', (event) => { // Используем весь документ для клика по елементу, для этого выполняем доп. проверку\r\n        if (event.target.matches('.notes-card__img[data-checked]')) {\r\n            const noteCard = event.target.closest('.notes-card');\r\n            const noteTitle = noteCard.querySelector('.notes-card__title');\r\n            \r\n            if (noteCard && noteTitle) {\r\n                styleToggle(noteCard, noteTitle);\r\n            }\r\n\r\n        }\r\n    });\r\n}\r\ncheckedNote();\r\n\r\nexport {checkedNote};","// Переменные для использования\r\nconst btnDeleteAll = document.querySelector('[data-btn=\"deleteAll\"]');\r\nconst cardTitle = document.querySelector('#title');\r\n\r\n// Удаления карточки\r\nfunction deleteCard () {\r\n    document.addEventListener('click', (event) => {\r\n        const noteCards = document.getElementsByClassName('notes-card');\r\n\r\n        if (event.target.matches('.notes-card__img[data-delete]')) {\r\n            const noteCard = event.target.closest('.notes-card');\r\n            noteCard.remove();\r\n            if (noteCard.style.opacity === '0.5') {\r\n                localStorage.removeItem('checked')\r\n            }\r\n        }\r\n\r\n\r\n        if (noteCards.length < 1) {\r\n            cardTitle.style.display = 'block';\r\n            localStorage.removeItem('notes');\r\n        } else {\r\n            cardTitle.style.display = 'none';\r\n        }\r\n    })\r\n}\r\ndeleteCard();\r\n\r\n// Удаление всех заметок\r\nfunction deleteAllNotes () {\r\n    btnDeleteAll.addEventListener('click', () => {\r\n        const noteCards = Array.from(document.getElementsByClassName('notes-card'));\r\n        console.log(noteCards);\r\n\r\n        if (noteCards.length >= 1) {\r\n            noteCards.forEach(element => element.remove());\r\n            localStorage.removeItem('notes');\r\n        }\r\n    })\r\n}\r\ndeleteAllNotes();\r\n\r\nexport {deleteCard, deleteAllNotes};","// Импорт функций\r\nimport {newNote, addNote, styleToggle} from './addNote';\r\n\r\n// Переменные для использования\r\nconst cardTitle = document.querySelector('#title');\r\n\r\n// Localstorage\r\n\r\n// Функция для сохранения данных в localStorage и преобразования в json строку\r\nfunction localStorageSave(key, value) {\r\n    const jsonData = JSON.stringify(value);\r\n    localStorage.setItem(key, jsonData);\r\n}\r\n\r\n\r\n// Получения данных из localStorage\r\nfunction takeDataFromLocalStorage(key) {\r\n    // Извлекаем данные из localStorage по указанному ключу\r\n    const retrievedData = localStorage.getItem(key);\r\n    \r\n    // Проверяем, существуют ли данные\r\n    if (retrievedData) {\r\n        // Преобразуем JSON-строку обратно в объект JavaScript\r\n        const parsedData = JSON.parse(retrievedData);\r\n        \r\n        // Выводим объект в консоль для проверки\r\n        console.log(parsedData);\r\n        \r\n        // Возвращаем объект\r\n        return parsedData;\r\n    }\r\n}\r\n\r\n\r\n// Загрузка наших заметок\r\nfunction loadNotes() {\r\n    const notesData = takeDataFromLocalStorage('notes');\r\n\r\n    if (notesData) {\r\n        notesData.forEach(note => {\r\n            newNote(note.title);\r\n        });\r\n    }\r\n}\r\nloadNotes();\r\n\r\n\r\n// CHATGPT\r\nfunction loadChecked() {\r\n    const checkedData = takeDataFromLocalStorage('checked');\r\n\r\n    if (Array.isArray(checkedData)) {\r\n        checkedData.forEach(checked => {\r\n            const noteCard = Array.from(document.querySelectorAll('.notes-card')).find(el => el.querySelector('.notes-card__title').textContent === checked.title);\r\n            if (noteCard && checked.opacity === '0.5') {\r\n                noteCard.style.opacity = '0.5';\r\n                noteCard.querySelector('.notes-card__title').style.textDecoration = 'line-through';\r\n            }\r\n        });\r\n    }\r\n}\r\nloadChecked();\r\n\r\n\r\n// Функция проверяет есть ли у нас в localStorage ключ notes, если есть то убирает название добавить новую заметку\r\nfunction checkCardsForTitle () {\r\n    if (localStorage.getItem('notes')) {\r\n        cardTitle.style.display = 'none';\r\n    }\r\n}\r\ncheckCardsForTitle();\r\n\r\n\r\n// CHATGPT\r\n// Сохранение состояния карточки в localStorage при нажатии на кнопку\r\nfunction saveLocalStorageChecked() {\r\n    document.addEventListener('click', (event) => {\r\n        const noteCard = event.target.closest('.notes-card');\r\n        \r\n        if (event.target.matches('[data-checked]') && noteCard) {\r\n            let checkedData = takeDataFromLocalStorage('checked') || [];\r\n            \r\n            const noteCardData = {\r\n                title: noteCard.querySelector('.notes-card__title').textContent,\r\n                opacity: noteCard.style.opacity\r\n            };\r\n\r\n            // Проверка стиля opacity\r\n            if (noteCard.style.opacity === '0.5') {\r\n                console.log('Произошёл клик');\r\n                \r\n                // Удаление существующей записи, если она уже была сохранена\r\n                checkedData = checkedData.filter(item => item.title !== noteCardData.title);\r\n                \r\n                // Добавление новой записи\r\n                checkedData.push(noteCardData);\r\n                \r\n            } else if (noteCard.style.opacity === '1') {\r\n                console.log('Клик произошёл не туда');\r\n                \r\n                // Удаление записи из массива, если opacity равно 1\r\n                checkedData = checkedData.filter(item => item.title !== noteCardData.title);\r\n            }\r\n            \r\n            localStorageSave('checked', checkedData);\r\n        }\r\n    });\r\n}\r\nsaveLocalStorageChecked();\r\n\r\nexport {localStorageSave, takeDataFromLocalStorage, loadNotes, loadChecked, checkCardsForTitle, saveLocalStorageChecked}","// Импорт функций\r\nimport {newNote, addNote, styleToggle} from './addNote';\r\nimport {localStorageSave, takeDataFromLocalStorage, loadNotes, loadChecked, checkCardsForTitle, saveLocalStorageChecked} from './localStorage';\r\n\r\n// Переменные для использования\r\nconst cardTitle = document.querySelector('#title');\r\n\r\n// Функция будет улавливать нажатие enter и добавлять input содержимое в карточку\r\nfunction enterEvent () {\r\n    document.addEventListener('keydown', (e) => {\r\n        const input = document.querySelector('[data-input]');\r\n        const value = input.value.trim();\r\n\r\n        if (e.code === 'Enter') {\r\n            e.preventDefault(); // Предотвращаем стандартное поведение формы\r\n        }\r\n    \r\n        if (e.code === 'Enter' && value) {\r\n            newNote(value);\r\n            console.log('Нажался Enter');\r\n    \r\n            // Обновляем сохраненные заметки в localStorage\r\n            const notesData = Array.from(document.getElementsByClassName('notes-card')).map(noteCard => {\r\n                return {\r\n                    title: noteCard.querySelector('.notes-card__title').textContent\r\n                };\r\n            });\r\n    \r\n            localStorageSave('notes', notesData);\r\n            \r\n            // Очищаем поле ввода после добавления заметки\r\n            input.value = '';\r\n        } else if (e.code === 'Enter') {\r\n            console.log('Энтер не нажался или значение пустое');\r\n        }\r\n\r\n        if (localStorage.getItem('notes')) {\r\n            cardTitle.style.display = 'none';\r\n        }\r\n    });\r\n}\r\nenterEvent();\r\n\r\nexport {enterEvent};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {newNote, addNote, styleToggle} from './modules/addNote';\r\nimport {checkedNote} from './modules/checked';\r\nimport {deleteCard, deleteAllNotes} from './modules/delete';\r\nimport {localStorageSave, takeDataFromLocalStorage, loadNotes, loadChecked, checkCardsForTitle, saveLocalStorageChecked} from './modules/localStorage';\r\nimport {enterEvent} from './modules/other';\r\n\r\n\r\n// Переменные для использования\r\nconst btnAdd = document.querySelector('[data-btn=\"add\"]');\r\nconst btnDeleteAll = document.querySelector('[data-btn=\"deleteAll\"]');\r\nconst input = document.querySelector('[data-input]');\r\nconst deleteNote = document.querySelector('[data-delete]');\r\nconst cardImg = document.querySelectorAll('.notes-card__img');\r\nconst checked = document.querySelector('.notes-card__img')\r\nconst cardTitle = document.querySelector('#title');\r\n\r\nsaveLocalStorageChecked();"],"names":[],"sourceRoot":""}